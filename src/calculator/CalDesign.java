package calculator;
import com.sun.xml.internal.ws.wsdl.DispatchException;
import com.sun.xml.internal.ws.wsdl.writer.document.Port;
import java.util.Stack;
import javax.swing.*;
import java.awt.event.*;


/**
 *
 * @author user
 */
public class CalDesign extends javax.swing.JFrame {

    /**
     * Creates new form CalDesign
     */
    public CalDesign() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_0 = new javax.swing.JButton();
        btn_1 = new javax.swing.JButton();
        btn_2 = new javax.swing.JButton();
        btn_3 = new javax.swing.JButton();
        btn_4 = new javax.swing.JButton();
        btn_5 = new javax.swing.JButton();
        btn_6 = new javax.swing.JButton();
        btn_7 = new javax.swing.JButton();
        btn_8 = new javax.swing.JButton();
        btn_9 = new javax.swing.JButton();
        btn_POINT = new javax.swing.JButton();

        btn_MUL = new javax.swing.JButton();
        btn_MINUS = new javax.swing.JButton();
        btn_ADD = new javax.swing.JButton();
        btn_DIV = new javax.swing.JButton();

        btn_MC = new javax.swing.JButton();
        btn_MR = new javax.swing.JButton();
        btn_Mplus = new javax.swing.JButton();
        btn_Mminus = new javax.swing.JButton();

        btn_EQUALS_TO = new javax.swing.JButton();

        Display_port = new javax.swing.JTextField();

        btn_dl = new javax.swing.JButton();
        btn_CE = new javax.swing.JButton();
        btn_C = new javax.swing.JButton();

        btn_SQUARE = new javax.swing.JButton();
        btn_PLUS_MIN = new javax.swing.JButton();
        btn_ROOT = new javax.swing.JButton();
        btn_1_DIV_X = new javax.swing.JButton();
        btn_percent = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        //Numeric button control section
        btn_0.setBackground(new java.awt.Color(255, 255, 255));
        btn_0.setText("0");
        btn_0.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_1.setBackground(new java.awt.Color(255, 255, 255));
        btn_1.setText("1");
        btn_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_2.setBackground(new java.awt.Color(255, 255, 255));
        btn_2.setText("2");
        btn_2.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_3.setBackground(new java.awt.Color(255, 255, 255));
        btn_3.setText("3");
        btn_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_4.setBackground(new java.awt.Color(255, 255, 255));
        btn_4.setText("4");
        btn_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_5.setBackground(new java.awt.Color(255, 255, 255));
        btn_5.setText("5");
        btn_5.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_6.setBackground(new java.awt.Color(255, 255, 255));
        btn_6.setText("6");
        btn_6.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_7.setBackground(new java.awt.Color(255, 255, 255));
        btn_7.setText("7");
        btn_7.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_8.setBackground(new java.awt.Color(255, 255, 255));
        btn_8.setText("8");
        btn_8.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_9.setBackground(new java.awt.Color(255, 255, 255));
        btn_9.setText("9");
        btn_9.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_POINT.setBackground(new java.awt.Color(255, 255, 255));
        btn_POINT.setText(".");
        btn_POINT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        //Arithmetic operator
        btn_MINUS.setText("-");
        btn_MINUS.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_ADD.setText("+");
        btn_ADD.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_DIV.setText("/");
        btn_DIV.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        btn_MUL.setText("*");
        btn_MUL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrokeActionPerformed(evt);
            }
        });

        //Correction and clearance event
        btn_CE.setText("CE");
        btn_CE.setMaximumSize(new java.awt.Dimension(47, 23));
        btn_CE.setMinimumSize(new java.awt.Dimension(47, 23));
        btn_CE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrectionActionPerformed(evt);
            }
        });

        btn_dl.setText("←");
        btn_dl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrectionActionPerformed(evt);
            }
        });

        btn_C.setText("C");
        btn_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrectionActionPerformed(evt);
            }
        });


        btn_EQUALS_TO.setBackground(new java.awt.Color(255, 51, 0));
        btn_EQUALS_TO.setText("=");
        btn_EQUALS_TO.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                EvalActionPerformed(evt);
            }
        });

        btn_MC.setText("MC");
        btn_MC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //btn_MCActionPerformed(evt);
            }
        });

        btn_MR.setText("MR");
        btn_MR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //btn_MRActionPerformed(evt);
            }
        });

        btn_Mplus.setText("M+");

        btn_Mminus.setText("M-");

        Display_port.setEditable(false);
        Display_port.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Display_port.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Display_port.setText("0");

        btn_ROOT.setText("√");
        btn_ROOT.setMaximumSize(new java.awt.Dimension(47, 23));
        btn_ROOT.setMinimumSize(new java.awt.Dimension(47, 23));
        btn_ROOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlterActionPerformed(evt);
            }
        });

        btn_SQUARE.setText("X²");
        btn_SQUARE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlterActionPerformed(evt);
            }
        });

        btn_1_DIV_X.setText("1 ⁄ X");
        btn_1_DIV_X.addActionListener(new java.awt.event.ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                AlterActionPerformed(evt);
            }
        });

        btn_percent.setText("%");
        btn_percent.setMaximumSize(new java.awt.Dimension(47, 23));
        btn_percent.setMinimumSize(new java.awt.Dimension(47, 23));
        btn_percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlterActionPerformed(evt);
            }
        });

        btn_PLUS_MIN.setText("±");
        btn_PLUS_MIN.setMaximumSize(new java.awt.Dimension(23, 23));
        btn_PLUS_MIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_percent, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_ROOT, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_POINT, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_EQUALS_TO, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_MINUS, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_ADD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_MUL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_DIV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_dl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_PLUS_MIN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_SQUARE, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_1_DIV_X))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_CE, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_C, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Display_port, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_MC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_MR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Mplus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Mminus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_0, btn_1, btn_1_DIV_X, btn_2, btn_3, btn_4, btn_5, btn_6, btn_7, btn_8, btn_9, btn_ADD, btn_C, btn_CE, btn_DIV, btn_EQUALS_TO, btn_MC, btn_MINUS, btn_MR, btn_MUL, btn_Mminus, btn_Mplus, btn_PLUS_MIN, btn_POINT, btn_ROOT, btn_SQUARE, btn_dl, btn_percent});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(Display_port, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_MC)
                    .addComponent(btn_MR)
                    .addComponent(btn_Mplus)
                    .addComponent(btn_Mminus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_percent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ROOT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_SQUARE)
                    .addComponent(btn_1_DIV_X))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_C)
                    .addComponent(btn_CE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_dl)
                    .addComponent(btn_PLUS_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_7)
                    .addComponent(btn_8)
                    .addComponent(btn_9)
                    .addComponent(btn_DIV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_5)
                        .addComponent(btn_6)
                        .addComponent(btn_MUL))
                    .addComponent(btn_4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_2)
                    .addComponent(btn_1)
                    .addComponent(btn_3)
                    .addComponent(btn_MINUS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_0)
                    .addComponent(btn_POINT)
                    .addComponent(btn_ADD)
                    .addComponent(btn_EQUALS_TO))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_0, btn_1, btn_1_DIV_X, btn_2, btn_3, btn_4, btn_5, btn_6, btn_7, btn_8, btn_9, btn_ADD, btn_C, btn_CE, btn_DIV, btn_EQUALS_TO, btn_MC, btn_MINUS, btn_MR, btn_MUL, btn_Mminus, btn_Mplus, btn_PLUS_MIN, btn_POINT, btn_ROOT, btn_SQUARE, btn_dl, btn_percent});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static strictfp void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalDesign().setVisible(true);
            }
        });
    }

    //Display port Declaration
    private javax.swing.JTextField Display_port;

    //Numeric Button Declaration
    private javax.swing.JButton btn_0;
    private javax.swing.JButton btn_1;
    private javax.swing.JButton btn_2;
    private javax.swing.JButton btn_3;
    private javax.swing.JButton btn_4;
    private javax.swing.JButton btn_5;
    private javax.swing.JButton btn_6;
    private javax.swing.JButton btn_7;
    private javax.swing.JButton btn_8;
    private javax.swing.JButton btn_9;
    private javax.swing.JButton btn_POINT;

    //Arithematic operator
    private javax.swing.JButton btn_ADD;
    private javax.swing.JButton btn_DIV;
    private javax.swing.JButton btn_MUL;
    private javax.swing.JButton btn_MINUS;

    //Correction and clearing Operators
    private javax.swing.JButton btn_C;
    private javax.swing.JButton btn_CE;
    private javax.swing.JButton btn_dl;

    //Memory based Operator
    private javax.swing.JButton btn_MC;
    private javax.swing.JButton btn_MR;
    private javax.swing.JButton btn_Mminus;
    private javax.swing.JButton btn_Mplus;

    //Altering Operator
    private javax.swing.JButton btn_1_DIV_X;
    private javax.swing.JButton btn_PLUS_MIN;
    private javax.swing.JButton btn_ROOT;
    private javax.swing.JButton btn_SQUARE;
    private javax.swing.JButton btn_percent;

    //Evaluation operator
    private javax.swing.JButton btn_EQUALS_TO;

    //DFA state controller
    private int State=0;
    private int miniState=0;
    // End of variables declaration//GEN-END:variables

    //Stack object declaration
    Stack<String> operatorStack= new Stack<String>();
    public void instrokeActionPerformed(ActionEvent click){
    String inkey = click.getActionCommand();
    int in_State = (int)inkey.charAt(0);
    String PortStat= Display_port.getText();
    switch (State){
        case 0:
            if(in_State>=49 && in_State<=57){
                PortStat= subprevious(PortStat);
                Display_port.setText(PortStat+inkey);
                State=1;
            }
            else if(inkey.equals(".")){
                Display_port.setText(PortStat+inkey);
                State=2;
            }
            break;
        case 1:
            if(in_State>=48 && in_State<=57){
                Display_port.setText(PortStat+inkey);
            }
            else if(inkey.equals(".")){
                Display_port.setText(PortStat+inkey);
                State=2;
            }
            else if(inkey.equals("+") || inkey.equals("-") || inkey.equals("/") || inkey.equals("*")){
                Display_port.setText(PortStat+inkey);
                State=4;
                operatorStack.push("<op1>");
            }
            break;
        case 2:
            if(in_State>=48 && in_State<=57){
                Display_port.setText(PortStat+inkey);
                State=3;
            }
            else if(inkey.equals("+") || inkey.equals("-") || inkey.equals("/") || inkey.equals("*")){
                PortStat=subprevious(PortStat);
                Display_port.setText(PortStat+inkey);
                State=4;
                operatorStack.push("<op1>");
            }
            break;
        case 3:
            if (in_State>=48 && in_State<=57){
                Display_port.setText(PortStat+inkey);
            }
            else if (inkey.equals("+") || inkey.equals("-") || inkey.equals("/") || inkey.equals("*")){
                Display_port.setText(PortStat+inkey);
                State=4;
                operatorStack.push("<op2>");
            }
            break;
        case 4:
            if (inkey.equals("+") || inkey.equals("-") || inkey.equals("/") || inkey.equals("*")){
                PortStat= subprevious(PortStat);
                Display_port.setText(PortStat+inkey);
            }
            else if(inkey.equals(".")){
                Display_port.setText(PortStat+"0.");
                State=2;
                operatorStack.push("<opr>");
            }
            else if (in_State==48){
                Display_port.setText(PortStat+inkey);
                State=0;
                operatorStack.push("<opr>");
            }
            else if(in_State>=49 && in_State<=58){
                Display_port.setText(PortStat+inkey);
                State=1;
                operatorStack.push("<opr>");
            }
            break;
        case 6:
            if (inkey.equals("+") || inkey.equals("-") || inkey.equals("/") || inkey.equals("*")){
                Display_port.setText(PortStat+inkey);
                State=4;
            }
    }
}
    //deltes one string at a time from right
    public String subprevious(String Str){
          int max= Str.length();
          String tempPort= "";
          for (int i = 0; i < (max-1); i++){
             tempPort+= Str.charAt(i);
         }
        return tempPort;
    }
    // Handles correction action buttons
    public void CorrectionActionPerformed(ActionEvent click){
        String invoke= click.getActionCommand();
        String tempPort= Display_port.getText();
        switch(invoke){
            case "C":
                Display_port.setText("0");
                State=0;
                miniState=0;
                operatorStack.clear();
                break;
            case "CE":
                if (State==2 || State==1 || State==3){
                    clearPoint(tempPort,max_op_pos(tempPort));
                    if (Display_port.getText().length()==1){
                        State=0;
                        miniState=0;
                    }
                }
            case "←":
                if(operatorStack.isEmpty() && State==0){
                    return;
                }
                else{
                    delAction(click);
                }

        }

    }
    //function to remove to a specific point
    private void clearPoint(String Portcheck,int max){
        String temp="";
        for (int i=0;i<=max;i++){
            temp+=Portcheck.charAt(i);
        }
        temp+="0";
        Display_port.setText(temp);

    }
    //to determine max position or index of operator
    private int max_op_pos(String Portcheck){
        int t1,t2,t3,t4,max;
        String temp="";
        //to check the final position of operator and finding last operator in the string
        t1=Portcheck.lastIndexOf("+");
        t2=Portcheck.lastIndexOf("-");
        t3=Portcheck.lastIndexOf("/");
        t4=Portcheck.lastIndexOf("*");
        if(t1>t2 && t1>t3 && t1>t4){
            max=t1;
        }
        else if (t2>t1 && t2>t3 && t2>t4){
            max=t2;
        }
        else if (t3>t1 && t3>t2 && t3>t4){
            max=t3;
        }
        else{
            max=t4;
        }
        return max;
    }
    // mini DFA structure to Stage 6
    public void AlterActionPerformed(ActionEvent click){
        String PortStat=Display_port.getText();
        if (State==2){
            Display_port.setText(subprevious(PortStat));
            State=6;
            operatorStack.push("<op1>");
        }
        else if(State==4) {
            Display_port.setText(subprevious(PortStat));
            State=6;
        }
        else if(State==3){
            operatorStack.push("<op2>");
            State=6;
        }
        else if(State==0){
            return;
        }
        else if(State==1){
            operatorStack.push("<op1>");
            State=6;
        }

        String invoke= click.getActionCommand();
        PortStat=Display_port.getText();
        switch (miniState){

            case 0:
                //first click
                if(invoke.equals("1 ⁄ X")){
                     /* Mini State refers to the state that in which the the button actually toggels the current state
                        i.e 1/(1/x) must show as x in the DisplayPort
                    */
                    operatorStack.push("<aopr1>");
                     Display_port.setText("1/("+PortStat+")");
                    miniState=1;
                }
                else if(invoke.equals("X²")){
                    /* mini State 2 refers to those extra operators that can be called many times in loop
                        i.e ((x)^2)^2 can bedone
                     */
                    miniState=2;
                    Display_port.setText("("+PortStat+")^2");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("√")){
                    miniState=2;
                    Display_port.setText("sqrt("+PortStat+")");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("%")){
                    EvalActionPerformed(click);
                    arimath ari=new arimath();
                    ari.ariPercentage(Display_port.getText());
                    if(PortStat.equals("0")){
                        State=0;
                    }
                    else if (PortStat.contains(".")){
                        State=2;
                    }
                    else {
                        State=1;
                    }
                }
                else{
                    miniState=3;
                    Display_port.setText("-("+PortStat+")");
                    operatorStack.push("<aopr3>");
                }
                break;
            case 1:
                if (invoke.equals("X²")){
                    miniState=2;
                    Display_port.setText("("+PortStat+")^2");
                    operatorStack.push("<aopr2>");
                }
                else if (invoke.equals("√")){
                    miniState=2;
                    Display_port.setText("sqrt("+PortStat+")");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("%")){
                    miniState=0;
                    AlterActionPerformed(click);
                }
                else if(invoke.equals("1 ⁄ X")){
                    DelComplex();
                    operatorStack.pop();
                    State=defineState();
                    miniState=defineMiniState();
                }
                else if(invoke.equals("±")){
                    miniState=3;
                    Display_port.setText("-("+PortStat+")");
                    operatorStack.push("<aopr3>");
                }
                break;
            case 2:
                if(invoke.equals("X²")) {
                    Display_port.setText("(" + PortStat + ")^2");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("√")){
                    Display_port.setText("sqrt("+PortStat+")");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("1 ⁄ X")){
                    Display_port.setText("1/("+PortStat+")");
                    miniState=1;
                    operatorStack.push("<aopr1>");
                }
                else if(invoke.equals("±")){
                    miniState=3;
                    Display_port.setText("-("+PortStat+")");
                    operatorStack.push("<aopr3>");
                }
                else if(invoke.equals("%")){
                    miniState=0;
                    AlterActionPerformed(click);
                }
                break;
            case 3:
                if (invoke.equals("X²")){
                    miniState=2;
                    Display_port.setText("("+PortStat+")^2");
                    operatorStack.push("<aopr2>");
                }
                else if (invoke.equals("√")){
                    miniState=2;
                    Display_port.setText("sqrt("+PortStat+")");
                    operatorStack.push("<aopr2>");
                }
                else if(invoke.equals("%")){
                    miniState=0;
                    AlterActionPerformed(click);
                }
                else if(invoke.equals("±")){
                    DelComplex();
                    operatorStack.pop();
                    miniState=defineMiniState();
                    State=defineState();
                }
                else if(invoke.equals("1 ⁄ X")){
                    Display_port.setText("1/("+PortStat+")");
                    miniState=1;
                    operatorStack.push("<aopr1>");
                }
                break;
        }
    }
    //function to delete AlterOperators
    public void DelComplex(){
        String PortStat= Display_port.getText();
        String temp="";
        int st= PortStat.indexOf("(");
        int en= PortStat.lastIndexOf(")");
        for(st+=1;st<en;st++){
            temp+=PortStat.charAt(st);
        }
        Display_port.setText(temp);
    }
    //defines previous State on the basis of Stack
    public int defineState(){
        String tip=operatorStack.peek();
        switch (tip){
            case "<op1>":
                return 1;
            case "<op2>":
                return 3;
            case "<opr>":
                return 4;
            default:
                return State;
        }
    }
    //define MiniState if exist
    public int defineMiniState(){
        String tip=operatorStack.peek();
        switch (tip){
            case "<aopr1>":
                return 1;
            case"<aopr2>":
                return 2;
            case "<aopr3>":
                return 3;
            default:
                return 0;
        }
    }

    /**
     *
     * @param click
     * delete action consist of 3 major action
     * 1: deleting one character or one operator/operand at a time
     * 2: Checking the current State and miniState for next input to occur
     * 3: to pop element out of Stack
     * It futher uses DFA structure to delete
     */
    void delAction(ActionEvent click){
        String instroke= Display_port.getText();
        char in;
        int in_asc;
        switch(State){
            case 0:
                if (!operatorStack.isEmpty()){
                    Display_port.setText(subprevious(instroke));
                    State=defineState();
                    miniState=defineMiniState();
                    operatorStack.pop();
                }
                break;
            case 1:
                if (!operatorStack.isEmpty()){
                    Display_port.setText(subprevious(instroke));
                    instroke=Display_port.getText();
                    in =instroke.charAt(instroke.length()-1);
                    in_asc=(int)in;
                    if(in_asc>=48 && in_asc<=57){
                        return;
                    }
                    else{
                        State=defineState();
                        miniState=defineMiniState();
                        operatorStack.pop();
                    }
                }
                else{
                    in =instroke.charAt(instroke.length()-1);
                    in_asc=(int)in;
                    if (instroke.equals("0")){
                        State=0;
                    }
                    else if(instroke.length()==1){
                        State =0;
                        Display_port.setText("0");
                    }
                    else{
                        Display_port.setText(subprevious(instroke));
                    }
                }
                break;
            case 2:
                Display_port.setText(subprevious(instroke));
                instroke=Display_port.getText();
                in =instroke.charAt(instroke.length()-1);
                in_asc=(int)in;
                if (in_asc==48 && instroke.length()==1){
                    State=0;
                    miniState=0;
                }
                else if(in_asc>=49 && in_asc<=57){
                    State=1;
                    miniState=0;
                }
                else{
                    operatorStack.pop();
                    State=defineState();
                    miniState=defineMiniState();
                }
                break;
            case 3:
                Display_port.setText(subprevious(instroke));
                instroke=Display_port.getText();
                in=instroke.charAt(instroke.length()-1);
                in_asc=(int)in;
                if(in_asc>=48 && in_asc<=57){
                    return;
                }
                else if(in=='.'){
                    State=2;
                }
                break;
            case 4:
                Display_port.setText(subprevious(instroke));
                State=defineState();
                miniState=defineMiniState();
                operatorStack.pop();
                break;
            case 6:
                DelComplex();
                State=defineState();
                miniState=defineMiniState();
                operatorStack.pop();
        }
    }

    /**
     *
      * @param error refers to the type of error that occured
     *  It uses State 7 of the DFA but State 7 has never been defined in the documentation
     *  It is because State 7 is undefined State and has no changes except when cleared
     *  math error define division by zero
     *  Infinity error defines rooting of negative number
     */
    public void errorset(String error){
        Display_port.setText(error);
        State=7;
        miniState=0;
    }

    /**
     *
     * @param click
     * lex.KeyParser is a funtion that takes the current string in the display port and parses it to operators nad operand
     * it also has futher capability to calculate precedance and implement the calculation
     * It aslo define the State of the input after calculation
     * Infinity and Nan are error in this seciton
     */
    public void EvalActionPerformed(ActionEvent click){
        if(State!=7){
            KeyEngine lex= new KeyEngine();
            String result=lex.KeyParser(Display_port.getText());
            Display_port.setText(result);
            if (result.contains(".")){
                State=3;
            }
            else if(result.equals("0")){
                State=0;
            }
            else if(result.equals("Infinity")){
                errorset("math error");
            }
            else if(result.equals("NaN")){
                errorset("Imaginary error");
            }
            else{
                State=1;
            }
            operatorStack.clear();
        }
    }
}

